digraph G {
  graph [pad="0.5"];
  node [fontname="Helvetica" fontsize=11];
  edge [fontname="Helvetica" fontsize=11];
  summary [label = "This is the flowchart for the program Tennis Match.   \nThe input is a string of A and B's indicating which   \nplayer (A or B) won a point. The output is the current\nscore of both players.",
  shape = note,
  style=filled, 
  fillcolor=yellow
  ];
  credits [label = "Priyansi", shape = signature, style=filled, fillcolor=aquamarine];
  start [label = "START", shape = ellipse, style=filled, fillcolor=salmon];
  end [label = "END", shape = ellipse, style=filled, fillcolor=salmon];
  input [label = "Input a string", shape = parallelogram, style=filled, fillcolor=plum1];
  output [label = "Output current score", shape = parallelogram, style=filled, fillcolor=plum1];
  tennis_match[label = "Traverse string", shape = rect, style=filled, fillcolor=lightcyan]
  update_points [label = "update_points()", shape = rect, style=filled, fillcolor=lightcyan];
  update_scores_right[label="Update Scores" shape=rect, style=filled, fillcolor=lightcyan];
  connecting_node_1[label="", shape=circle, style=filled, fillcolor=black];
  connecting_node_2[label="", shape=circle, style=filled, fillcolor=black];
  connecting_node_3[label="", shape=circle, style=filled, fillcolor=black];
  connecting_node_4[label="", shape=circle, style=filled, fillcolor=black];
  connecting_node_5[label="", shape=circle, style=filled, fillcolor=black];
  update_scores_left[
    label="Update Scores";
    shape=rect;
    style=filled;
    fillcolor=lightcyan
  ];
  points_min_reqd_to_win [
    label = "Min Points\nRequired To\nWin Game?";
    shape = diamond;
    style=filled;
    fillcolor=gold;
  ];
  update_game_win [
    label = "update_game_win()";
    shape = rect;
    style=filled;
    fillcolor=lightcyan
  ];
  update_set_win [
    label = "update_set_win()";
    shape = rect;
    style=filled;
    fillcolor=lightcyan
  ];
  deuce [
    label = "Deuce?";
    shape = diamond;
    style=filled;
    fillcolor=gold;
  ];
  points_minus_one [
    label = "Both player points\ndecremented by 1";
    shape = rect;
    style=filled;
    fillcolor=lightcyan
  ];
  points_min_diff_reqd_to_win [
    label = "Min Points\nDiff Required\nTo Win Game?";
    shape = diamond;
    style=filled;
    fillcolor=gold;
  ];
  game_win [
    label = "Player wins a game";
    shape = rect;
    style=filled;
    fillcolor=lightcyan
  ];
  points_initialized[
    label="Points Initialized";
    shape=rect;
    style=filled;
    fillcolor=lightcyan
    ];
  games_min_reqd_to_win_set [
    label = "Min Games\nRequired To\nWin Set?";
    shape = diamond;
    style=filled;
    fillcolor=gold;
  ];
  games_min_diff_reqd_to_win [
    label = "Min Games\nDiff Required To\nWin Game?";
    shape = diamond;
    style=filled;
    fillcolor=gold;
  ];
  set_win [
    label = "Player wins a set";
    shape = rect;
    style=filled;
    fillcolor=lightcyan
  ];
  summary->start[color=white]
  start->input
  output->end
  input -> tennis_match
  tennis_match->output
  update_scores_left->tennis_match
  tennis_match-> update_points
  update_points->points_min_reqd_to_win
  points_min_reqd_to_win->update_game_win [ label = "Yes",color=forestgreen]
  connecting_node_1->points_min_reqd_to_win[label="No",dir=back,color=red]
  update_game_win->deuce
  deuce->points_minus_one[label="Yes",color=forestgreen]
  points_minus_one->connecting_node_5
  deuce->points_min_diff_reqd_to_win[label="No",color=red]
  points_min_diff_reqd_to_win->game_win[label="Yes",color=forestgreen]
  connecting_node_2->points_min_diff_reqd_to_win[label="No" dir=back,color=red]
  connecting_node_1->update_scores_left
  game_win->points_initialized
  points_initialized->connecting_node_5
  game_win->games_min_reqd_to_win_set
  games_min_reqd_to_win_set->update_set_win[label="Yes",color=forestgreen]
  connecting_node_3->games_min_reqd_to_win_set[label="No", dir=back,color=red]
  update_set_win->games_min_diff_reqd_to_win
  games_min_diff_reqd_to_win->set_win[label="Yes",color=forestgreen]
  set_win->points_initialized
  connecting_node_4->games_min_diff_reqd_to_win[label="                         No                      ", dir=back,color=red]
  connecting_node_3->connecting_node_2
  connecting_node_4->connecting_node_3
  connecting_node_2->connecting_node_1
  connecting_node_5->update_scores_right
  tennis_match->update_scores_right[label="                                                                              ",dir=back]
  {
    rank=same;
    start;end
  }
  {
    rank=same;
    input;output
  }
  {
    rank=same;
    tennis_match;update_scores_left;update_scores_right
  }
  {
    rank=same;
    points_min_reqd_to_win;update_game_win;connecting_node_1
  }
  {
    rank=same;
    deuce;points_minus_one;connecting_node_5
  }
  {
    rank=same;
    game_win;points_initialized;points_min_diff_reqd_to_win;connecting_node_2
  }
  {
    rank=same;
    connecting_node_3;games_min_reqd_to_win_set;update_set_win
  }
  {
    rank=same;
    games_min_diff_reqd_to_win;set_win;connecting_node_4
  }
}